# Python to Linux Web App on Azure
# Build your Python project and deploy it to Azure as a Linux Web App.
# Change python version to one thats appropriate for your application.
# https://docs.microsoft.com/azure/devops/pipelines/languages/python

trigger: none

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: 'f0372df8-cd85-479c-a4b0-ef7253d9acef'

  # Web app name
  webAppName: 'myPythonAppService1704'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Environment name
  environmentName: Dev

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.7
  pythonVersion: '3.7'

  artifactName: myWebApp
  
  #Code coverage threshold in percentage
  coverageThreshold : 70

  #Is this run from Main Branch?
  isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]

  #Is this run from PR?
  isPR : $[eq(variables['Build.Reason'], 'PullRequest')]

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"
    
    - script: |
        pip install pylint
        pylint hello_app --output-format=parseable --output=pylint.log --fail-under=1
      continueOnError: false
      displayName: "Running Pylint"

    - script: |
        pip install pytest-azurepipelines
        pip install pytest-cov
        pytest --doctest-modules --junitxml=junit/test-results.xml --cov=. --cov-report=xml
      displayName: 'Test with pytest'
 

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for $(webAppName)'
      displayName: 'Publishing Test results for $(webAppName)' 

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
      displayName: 'Publishing Code coverage via Cobertura' 

    
    - task: BuildQualityChecks@8
      inputs:
        checkCoverage: true
        coverageFailOption: 'fixed'
        coverageType: 'lines'
        coverageThreshold: '$(coverageThreshold)'
      displayName: "Build Quality Checks"  

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(artifactName).zip
        replaceExistingArchive: true
      displayName: 'Archive files'


    - publish: $(Build.ArtifactStagingDirectory)/$(artifactName).zip
      artifact: $(artifactName)
      displayName: 'Publishing package'


- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  # condition: eq(variables['Build.Reason'], 'Manual')
  condition: and(succeeded(), eq(variables.isMain, true) , eq(variables.isPR, false))
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: 'specific'
              project: '1a827c5f-88ea-4ff7-bc02-182622b5685b'
              definition: '2'
              buildVersionToDownload: 'latest'
              artifactName: '$(artifactName)'
              targetPath: '$(Build.ArtifactStagingDirectory)/deploy'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : $(webAppName)'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Build.ArtifactStagingDirectory)/deploy/$(artifactName).zip
              deploymentMethod : zipDeploy
              appType : webAppLinux
              startUpCommand: 'startup.txt'
